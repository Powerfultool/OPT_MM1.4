/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package OPT_acq;

import ij.ImagePlus;
import ij.process.ByteProcessor;
import ij.process.ColorProcessor;
import ij.process.ShortProcessor;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSlider;
import mmcorej.CMMCore;
import org.micromanager.MMStudio;
import org.micromanager.api.ScriptInterface;
import org.micromanager.utils.MMScriptException;
import java.util.*;

/**
 *
 * @author Fogim
 */
public class Rotation_control extends javax.swing.JPanel {
    
    private OPT_frame parent_;
    private boolean align_mode = false;
    private boolean HV_align = false;
    //private CMMCore core_;
    //private MMStudio gui_;  // Might be useful to put in at some point? ### WAS DISABLED
    //private ScriptInterface si_;    
    Object img;
    int stop = 0;
    private int usteps_per_rev = 0;

    /**
     * Creates new form Rotation_control
     */
    public Rotation_control() {
        initComponents();
    }
    
    public void set_steprange(int usteps_in_rev){
        usteps_per_rev = usteps_in_rev;
        update_angles();
    }
    
    public int get_steprange(){
        return usteps_per_rev;
    }    
    
    public void setParent(Object parent_frame){
        parent_ = (OPT_frame) parent_frame;
    }
    
    public void set_angle(int angletoset){
        try {
            parent_.set_angle(angletoset);
        } catch (Exception ex) {
            Logger.getLogger(Rotation_control.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void update_angles(){
        ArrayList<String> angles = new ArrayList<String>();
        for(int i = 1; i<=usteps_per_rev; i++){
            if(usteps_per_rev%i==0){
                String tmp = String.valueOf(i);
                angles.add(tmp);
            }
        }
        Num_angles.removeAllItems();
        try {
            for(int k=0;k<(angles.size()-1);k++){
                //System.out.println(str);
                Num_angles.addItem(angles.get(k));
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }        
        Angle_control.setMaximum(usteps_per_rev);
        Rot_label.setText("Rotation control [microsteps] - 0 to "+usteps_per_rev);
    }
    
    private void run_alignment(){
    System.out.println(parent_.gui_.getVersion());
        try {
            //call alignment procedure in parent
            parent_.do_alignment();
        } catch (MMScriptException | InterruptedException ex) {
            Logger.getLogger(Rotation_control.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public boolean get_HV_align(){
        return HV_align;
    }        
    
    public void set_HV_align(boolean hv_tf){
        HV_align = hv_tf;
    }        
    
    public boolean align_status(){
        return align_mode;
    }
    
    public void set_align_status(boolean running_tf){
        align_mode = running_tf;
        this.Align_mode.setSelected(running_tf);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jLabel1 = new javax.swing.JLabel();
        Angle_control = new javax.swing.JSlider();
        Rot_label = new javax.swing.JLabel();
        Align_mode = new javax.swing.JToggleButton();
        Num_angles = new javax.swing.JComboBox<>();
        Num_angles_label = new javax.swing.JLabel();
        Angle_num = new javax.swing.JTextField();
        Align_HV = new javax.swing.JCheckBox();

        jLabel1.setText("jLabel1");

        Angle_control.setMajorTickSpacing(10);
        Angle_control.setMaximum(360);
        Angle_control.setMinorTickSpacing(1);
        Angle_control.setToolTipText("Rotation angle in degrees");
        Angle_control.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                Angle_controlStateChanged(evt);
            }
        });

        Rot_label.setText("Rotation control [microsteps]");

        Align_mode.setText("Alignment mode");
        Align_mode.setToolTipText("Switches alignment mode on/off");
        Align_mode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Align_modeActionPerformed(evt);
            }
        });

        Num_angles.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        Num_angles.setToolTipText("Sets how many equidistant positions are used in acquisition");
        Num_angles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Num_anglesActionPerformed(evt);
            }
        });

        Num_angles_label.setText("# angles in acquisition");

        Angle_num.setText("0");
        Angle_num.setToolTipText("Rotation angle in degrees");

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, Angle_control, org.jdesktop.beansbinding.ELProperty.create("${value}"), Angle_num, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        Angle_num.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Angle_numActionPerformed(evt);
            }
        });

        Align_HV.setText("H/V");
        Align_HV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Align_HVActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Num_angles_label)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(Rot_label)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(Align_mode)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(Align_HV)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Num_angles, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(Angle_control, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(Angle_num, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(Rot_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Angle_control, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Angle_num, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(Num_angles_label)
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Num_angles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Align_mode)
                        .addComponent(Align_HV)))
                .addContainerGap(186, Short.MAX_VALUE))
        );

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    private void Num_anglesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Num_anglesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Num_anglesActionPerformed

    private void Align_modeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Align_modeActionPerformed
        if(Align_mode.isSelected()){
            //Disable other controls when in alignment mode
            Angle_control.setEnabled(false);
            Angle_num.setEnabled(false);           
            align_mode = true;
            run_alignment();
        } else {
            Angle_control.setEnabled(true);
            Angle_num.setEnabled(true);            
            align_mode = false;
        }
    }//GEN-LAST:event_Align_modeActionPerformed

    private void Angle_controlStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_Angle_controlStateChanged
        // TODO add your handling code here:
        //If it ISN'T being adjusted...
        if (!Angle_control.getValueIsAdjusting()){
            //System.out.println(Angle_control.getValue());
            set_angle(Angle_control.getValue());
        }
    }//GEN-LAST:event_Angle_controlStateChanged

    private void Align_HVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Align_HVActionPerformed
        // TODO add your handling code here:
        HV_align = Align_HV.isSelected();
    }//GEN-LAST:event_Align_HVActionPerformed

    private void Angle_numActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Angle_numActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Angle_numActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox Align_HV;
    private javax.swing.JToggleButton Align_mode;
    private javax.swing.JSlider Angle_control;
    private javax.swing.JTextField Angle_num;
    private javax.swing.JComboBox<String> Num_angles;
    private javax.swing.JLabel Num_angles_label;
    private javax.swing.JLabel Rot_label;
    private javax.swing.JLabel jLabel1;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
